// Mocks generated by Mockito 5.3.0 from annotations
// in mem/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mem/mem.dart' as _i2;
import 'package:mem/repositories/mem_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMem_0 extends _i1.SmartFake implements _i2.Mem {
  _FakeMem_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [MemRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemRepository extends _i1.Mock implements _i3.MemRepositoryV1 {
  MockMemRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Mem> receive(Map<String, dynamic>? value) =>
      (super.noSuchMethod(Invocation.method(#receive, [value]),
              returnValue: _i4.Future<_i2.Mem>.value(
                  _FakeMem_0(this, Invocation.method(#receive, [value]))))
          as _i4.Future<_i2.Mem>);
  @override
  _i4.Future<List<_i2.Mem>> ship(bool? archived) =>
      (super.noSuchMethod(Invocation.method(#ship, [archived]),
              returnValue: _i4.Future<List<_i2.Mem>>.value(<_i2.Mem>[]))
          as _i4.Future<List<_i2.Mem>>);
  @override
  _i4.Future<_i2.Mem> shipWhereIdIs(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#shipWhereIdIs, [id]),
              returnValue: _i4.Future<_i2.Mem>.value(
                  _FakeMem_0(this, Invocation.method(#shipWhereIdIs, [id]))))
          as _i4.Future<_i2.Mem>);
  @override
  _i4.Future<_i2.Mem> update(_i2.Mem? mem) =>
      (super.noSuchMethod(Invocation.method(#update, [mem]),
              returnValue: _i4.Future<_i2.Mem>.value(
                  _FakeMem_0(this, Invocation.method(#update, [mem]))))
          as _i4.Future<_i2.Mem>);
  @override
  _i4.Future<_i2.Mem> archive(_i2.Mem? mem) =>
      (super.noSuchMethod(Invocation.method(#archive, [mem]),
              returnValue: _i4.Future<_i2.Mem>.value(
                  _FakeMem_0(this, Invocation.method(#archive, [mem]))))
          as _i4.Future<_i2.Mem>);
  @override
  _i4.Future<_i2.Mem> unarchive(_i2.Mem? mem) =>
      (super.noSuchMethod(Invocation.method(#unarchive, [mem]),
              returnValue: _i4.Future<_i2.Mem>.value(
                  _FakeMem_0(this, Invocation.method(#unarchive, [mem]))))
          as _i4.Future<_i2.Mem>);
  @override
  _i4.Future<bool> discardWhereIdIs(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#discardWhereIdIs, [id]),
          returnValue: _i4.Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<int> discardAll() =>
      (super.noSuchMethod(Invocation.method(#discardAll, []),
          returnValue: _i4.Future<int>.value(0)) as _i4.Future<int>);
}
