name: "Continuous Integration"

on:
  push:

env:
  flutter-channel: stable

jobs:
  set_up-env:
    name: "Set up Environment variables"
    outputs:
      flutter-channel: ${{ steps.env-variables.outputs.flutter-channel }}
    runs-on: ubuntu-latest
    steps:
      - id: env-variables
        name: "Set up Environment variables"
        run: |
          echo "flutter-channel=${{ env.flutter-channel }}" >> $GITHUB_OUTPUT

  analyze-code:
    needs: set_up-env
    uses: ./.github/workflows/analyze-code.yml
    with:
      flutter-channel: ${{ needs.set_up-env.outputs.flutter-channel }}

  small_test:
    needs: set_up-env
    uses: ./.github/workflows/small_test.yml
    with:
      flutter-channel: ${{ needs.set_up-env.outputs.flutter-channel }}
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  medium_test-android:
    needs: set_up-env
    name: "Medium test(Android)"
    uses: ./.github/workflows/medium_test-android.yml
    with:
      flutter-channel: ${{ needs.set_up-env.outputs.flutter-channel }}
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  medium_test-windows:
    needs: set_up-env
    name: "Medium test(Windows)"
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: "Set up Flutter"
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ needs.set_up-env.outputs.flutter-channel }}
          cache: true

      - name: "Generate Localization code"
        uses: ./.github/actions/generate-localization_code

      - name: "Run Windows Medium Test"
        run: >
          flutter test integration_test/app_test.dart
          --dart-define=CICD=true
          --coverage
          --device-id windows
          --file-reporter json:reports/test_report.log

      - name: "Report"
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: "Report (Medium test (Windows))"
          path: "reports/test_report.log"
          reporter: "flutter-json"
          fail-on-error: false
          fail-on-empty: false
      - name: "Upload coverage"
        if: always()
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: medium_test-windows
