name: "[EX]Continuous Integration"

on:
  push:

env:
  flutter-channel: stable

jobs:
  analyze-code:
    name: Analyze ${{ matrix.analyze-target }} code

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
#        flutter-channel: [ stable, beta, master]
#        analyze-target: [ application, test ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: "Set up Flutter"
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.flutter-channel }}
#          channel: ${{ matrix.flutter-channel }}
          cache: true

      - name: "Analyze Application code"
#        if: ${{ matrix.analyze-target == 'application' }}
        run: flutter analyze lib

      - name: "Generate Mocks"
#        if: ${{ matrix.analyze-target == 'test' }}
        uses: ./.github/actions/build-mocks
      - name: "Analyze Test code"
#        if: ${{ matrix.analyze-target == 'test' }}
        run: flutter analyze test integration_test

  medium_test-android:
    name: "Medium test(Android)"

    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
# TODO 複数のAndroid Emulator Runnerを使う
#   - malinskiy/action-android
#   - reactivecircus/android-emulator-runner
#   パフォーマンスチェックのため
#   Github actionsの実行時間制限とかが出始めたらやめる
        android-emulator-runner: [ malinskiy, reactivecircus ]

# TODO 画面サイズ
# TODO OSバージョン
# TODO Java distribution
# TODO Java version

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: Set up AVD
        uses: ./.github/actions/set_up-avd
        with:
          method: ${{ matrix.android-emulator-runner }}
          java-distribution: zulu
          java-version: 11
          android-api-level: 29
          android-target: default
          android-arch: x86_64

      - name: "Set up Flutter"
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.flutter-channel }}
          cache: true

      - name: 'Generate Localization code'
        uses: ./.github/actions/generate-localization_code

      - name: "Run Flutter Tests"
        if: ${{ matrix.android-emulator-runner == 'reactivecircus' }}
        id: test-execution
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          profile: Nexus 6
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            bash ./scripts/integration_test.sh "emulator-5554"
#          script: flutter test integration_test/app_test.dart --machine  -d android --coverage --dart-define=CICD=true | tee >(grep "^{" | grep "}$" > temp_report.log)
      - id: 'test_execution'
        if: ${{ matrix.android-emulator-runner == 'malinskiy' }}
        continue-on-error: true
        run: flutter test integration_test/app_test.dart -d "emulator-5554" --coverage --dart-define=CICD=true

      - name: "Upload coverage"
        if: success() || failure()
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: medium_test-android-ex-${{ matrix.android-emulator-runner }}

      - name: Report
        if: success() || failure()
        uses: dorny/test-reporter@v1
        with:
#          name: '${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.arch }}'
          name: 'Medium test(Android)'
          path: 'temp_report.log'
          reporter: 'flutter-json'
          fail-on-error: true
