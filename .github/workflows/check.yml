# buildは全体で同じものを使いたい
# それぞれでbuildするのはもったいない
# buildだけじゃなくて、ランタイムとかも同様
# 全体とはいうがOSによって異なるのは許容というか理解できる

# job単位で別のランナー（サーバ）になる
# ので、依存関係がある場合には何かしらの方法で連携する必要がある

# 最終的にはコード解析とテスト、デプロイまでやりたい
# 現時点ではデプロイは不要
# コード解析とテストを直列でやる必要はないので、並列でやる
# コード解析はテストコードとプロダクションコード
# テストもテストの種類によって必要な準備やOSが異なる
# はずなので、それぞれランナーは分けたい=別jobで実行する
# とはいえ、同じOSで良いこともあるのでそこは共通化したい

# 概念として、一つのワークフローにまとめるべき
# な気がしてきた

# 外部のactionを使う場合のみに、actionを使う？
# そういうわけじゃないか
# buildとかでどのOSでも同じ命令になることはありえる

name: 'Check'

on:
  push:

env:
  flutter-version: '3.10.3'
  flutter-channel: 'stable'

jobs:
  build-on-ubuntu:
    name: 'Build on ubuntu'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Install Flutter'
        uses: ./.github/actions/install-flutter
        with:
          version: ${{ env.flutter-version }}
          channel: ${{ env.flutter-channel }}
      - name: 'Generate Localization code'
        uses: ./.github/actions/generate-localization_code

  build_test-on-ubuntu:
    name: 'Build test on ubuntu'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Install Flutter'
        uses: ./.github/actions/install-flutter
        with:
          version: ${{ env.flutter-version }}
          channel: ${{ env.flutter-channel }}
      - name: 'Install dependencies'
        uses: ./.github/actions/install-dependencies
      - name: 'Build Mocks'
        uses: ./.github/actions/build-mocks

  analyze-production_code:
    name: 'Analyze Production code'
    needs: [build-on-ubuntu]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Install Flutter'
        uses: ./.github/actions/install-flutter
        with:
          version: ${{ env.flutter-version }}
          channel: ${{ env.flutter-channel }}
      - name: 'Generate Localization code'
        uses: ./.github/actions/generate-localization_code
      - name: 'Flutter Doctor'
        run: flutter doctor -v
      - name: 'Analyze Production code'
        run: flutter analyze lib

  analyze-test_code:
    name: 'Analyze Test code'
    needs: [build_test-on-ubuntu]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3
      - name: 'Install Flutter'
        uses: ./.github/actions/install-flutter
        with:
          version: ${{ env.flutter-version }}
          channel: ${{ env.flutter-channel }}
      - name: 'Install dependencies'
        uses: ./.github/actions/install-dependencies
      - name: 'Build Mocks'
        uses: ./.github/actions/build-mocks
      - name: 'Flutter Doctor'
        run: flutter doctor -v
      - name: 'Analyze Test code'
        run: flutter analyze test integration_test

  small_test:
    name: 'Small test'
    needs: [build_test-on-ubuntu]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3
      - name: 'Install Flutter'
        uses: ./.github/actions/install-flutter
        with:
          version: ${{ env.flutter-version }}
          channel: ${{ env.flutter-channel }}
      - name: 'Install dependencies'
        uses: ./.github/actions/install-dependencies
      - name: 'Build Mocks'
        uses: ./.github/actions/build-mocks
      - name: 'Generate Localization code'
        uses: ./.github/actions/generate-localization_code
      - name: 'Flutter Doctor'
        run: flutter doctor -v
      - id: 'test_execution'
        continue-on-error: true
        run: flutter test --coverage
      - name: 'Upload coverage'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: small_test
      - name: 'Error handling'
        if: ${{ steps.test_execution.outcome == 'failure' }}
        run: exit 1
